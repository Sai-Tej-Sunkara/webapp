name: Build Packer App
'on':
  pull_request:
    types:
      - closed
    branches:
      - main
env:
  AWS_PROFILE: '${{ secrets.AWS_PROFILE }}'
  AWS_REGION: '${{ secrets.AWS_REGION }}'
  DEMO_AMI_USER: '${{ secrets.DEMO_AMI_USER }}'
  DEV_AMI_USER: '${{ secrets.DEV_AMI_USER }}'
  INSTANCE: '${{ secrets.INSTANCE }}'
  SOURCE_AMI: '${{ secrets.SOURCE_AMI }}'
  SSH_USERNAME: '${{ secrets.SSH_USERNAME }}'
  VOLUME_SIZE: '${{ secrets.VOLUME_SIZE }}'
  VOLUME_TYPE: '${{ secrets.VOLUME_TYPE }}'
  PROTECT_FROM_TERMINATION: '${{ secrets.PROTECT_FROM_TERMINATION }}'
  LOGICAL_DEVICE_NAME: '${{ secrets.LOGICAL_DEVICE_NAME }}'
  USER: '${{ secrets.USER }}'
  pass: '${{ secrets.PASS }}'
  HOST: '${{ secrets.HOST }}'
  DATABASE: '${{ secrets.DATABASE }}'
  KEY_ID: '${{ secrets.KEY_ID }}'
  SECRET_KEY: '${{ secrets.SECRET_KEY }}'
  LT_NAME: '${{ secrets.LT_NAME }}'
  ASG_NAME: '${{ secrets.ASG_NAME }}'
jobs:
  packer-build:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    env:
      DATABASE: '${{ secrets.DATABASE }}'
      USER: '${{ secrets.USER_ROOT }}'
      PASS: '${{ secrets.PASS_ROOT }}'
      HOST: '${{ secrets.HOST }}'
      DIALECT: '${{ secrets.DIALECT }}'
      LT_NAME: '${{ secrets.LT_NAME }}'
      ASG_NAME: '${{ secrets.ASG_NAME }}'
    strategy:
      matrix:
        node-version:
          - 16.x
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2
      - run: npm i
      - name: 'Using, Node, Express, and Sequelize'
        uses: actions/setup-node@v2
        with:
          node-version: '${{ matrix.node-version }}'
          cache: npm
      - run: sudo systemctl start mysql
      - run: systemctl status mysql
      - run: >-
          sudo mysql --user=${{ secrets.USER_ROOT }} --password=${{
          secrets.PASS_ROOT }} -e "create database ${{ secrets.DATABASE }}";
      - run: >-
          sudo mkdir -p /var/log/webappLogs/ && sudo touch
          /var/log/webappLogs/webapp.log
      - run: npm test
      - name: Install Packer
        run: >
          curl -SL
          https://releases.hashicorp.com/packer/1.4.2/packer_1.4.2_linux_amd64.zip
          -o packer_1.4.2_linux_amd64.zip

          unzip -o packer_1.4.2_linux_amd64.zip -d /tmp

          sudo mv /tmp/packer /usr/bin/packer

          packer --version
      - name: Create webapp.zip
        run: |
          zip -r webapp.zip .
      - name: Initialize Packer Configuration and Format packer file
        run: |
          packer init packer/amazon-machine-image.pkr.hcl
          packer fmt packer/amazon-machine-image.pkr.hcl
      - name: Validate Packer Configuration
        run: |
          packer validate packer/amazon-machine-image.pkr.hcl
      - name: Build Amazon Machine Image
        run: |
          packer build packer/amazon-machine-image.pkr.hcl
      - name: >-
          Get the AMI ID and latest template version and Create a new launch
          template version from AMI and refresh the ASG with new launch template
          version
        run: >
          export PROD_AWS_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }} &&
          export PROD_AWS_SECRET_ACCESS_KEY=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          AMI_ID=`aws ec2 describe-images --filters "Name=name,Values=WEBAPP*"
          --query 'reverse(sort_by(Images, &CreationDate))[:1].ImageId' --output
          text` latest_version=$(aws ec2 describe-launch-template-versions
          --launch-template-name $LT_NAME --query
          'reverse(sort_by(LaunchTemplateVersions,
          &VersionNumber))[0].VersionNumber') aws ec2
          create-launch-template-version --launch-template-name "$LT_NAME"
          --source-version "$latest_version" --launch-template-data
          '{"ImageId":"'"$AMI_ID"'"}' aws autoscaling start-instance-refresh
          --auto-scaling-group-name "$ASG_NAME" --strategy Rolling --preferences
          '{"MinHealthyPercentage":100,"InstanceWarmup":60}'
